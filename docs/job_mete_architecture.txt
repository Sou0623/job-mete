# 🏗️ Job Mete アーキテクチャ設計書 v1.5

---

## 1. システム全体構成

### 1.1 システムアーキテクチャ概要

```
┌─────────────────────────────────────────────────────────────┐
│                        クライアント層                        │
│  ┌─────────────────────────────────────────────────────┐   │
│  │         React SPA (TypeScript + Tailwind CSS)       │   │
│  │  ┌──────────┐ ┌──────────┐ ┌──────────┐           │   │
│  │  │ Pages    │ │Components│ │ Hooks    │           │   │
│  │  └──────────┘ └──────────┘ └──────────┘           │   │
│  │  ┌──────────┐ ┌──────────┐ ┌──────────┐           │   │
│  │  │ Context  │ │ Services │ │ Utils    │           │   │
│  │  └──────────┘ └──────────┘ └──────────┘           │   │
│  └─────────────────────────────────────────────────────┘   │
└─────────────────────────────────────────────────────────────┘
                            ↓ ↑
              Firebase SDK / HTTPS Callable
                            ↓ ↑
┌─────────────────────────────────────────────────────────────┐
│                      Firebase Platform                       │
│  ┌──────────────┐  ┌──────────────┐  ┌──────────────┐     │
│  │ Authentication│  │  Firestore   │  │  Functions   │     │
│  │  (Google)    │  │  (NoSQL DB)  │  │ (Node.js)    │     │
│  └──────────────┘  └──────────────┘  └──────────────┘     │
└─────────────────────────────────────────────────────────────┘
                            ↓ ↑
                    External API Calls
                            ↓ ↑
┌─────────────────────────────────────────────────────────────┐
│                       外部API層                              │
│  ┌──────────────┐  ┌──────────────┐                        │
│  │  Gemini API  │  │Google Calendar│                       │
│  │(w/ Search)   │  │     API       │                       │
│  └──────────────┘  └──────────────┘                        │
└─────────────────────────────────────────────────────────────┘
```

### 1.2 アーキテクチャの特徴

**採用パターン:** サーバーレスアーキテクチャ + BFF (Backend For Frontend)

**主要な設計判断:**
1. **フロントエンド:** React SPAで高速なユーザー体験を提供
2. **バックエンド:** Firebase Functionsで外部API統合とビジネスロジックを分離
3. **データベース:** Firestoreでリアルタイムデータ同期とスケーラビリティを確保
4. **認証:** Firebase Authenticationで安全なユーザー管理

---

## 2. レイヤー別詳細設計

### 2.1 プレゼンテーション層（フロントエンド）

#### ディレクトリ構造

```
src/
├── components/           # 再利用可能なUIコンポーネント
│   ├── common/          # 汎用コンポーネント
│   │   ├── Button.tsx
│   │   ├── Input.tsx
│   │   ├── Modal.tsx
│   │   ├── Loading.tsx
│   │   └── ErrorBoundary.tsx
│   ├── layout/          # レイアウトコンポーネント
│   │   ├── Header.tsx
│   │   ├── Footer.tsx
│   │   ├── Sidebar.tsx
│   │   └── AppLayout.tsx
│   ├── companies/       # 企業関連コンポーネント
│   │   ├── CompanyCard.tsx
│   │   ├── CompanyList.tsx
│   │   ├── CompanyDetail.tsx
│   │   ├── CompanyForm.tsx
│   │   └── CompanyAnalysis.tsx
│   ├── events/          # 予定関連コンポーネント
│   │   ├── EventCard.tsx
│   │   ├── EventList.tsx
│   │   ├── EventForm.tsx
│   │   └── EventCalendar.tsx
│   └── trends/          # 傾向分析コンポーネント
│       ├── TrendChart.tsx
│       ├── IndustryPieChart.tsx
│       ├── KeywordCloud.tsx
│       └── TrendSummary.tsx
│
├── pages/               # ページコンポーネント
│   ├── LoginPage.tsx
│   ├── DashboardPage.tsx
│   ├── CompaniesPage.tsx
│   ├── CompanyDetailPage.tsx
│   ├── EventsPage.tsx
│   ├── TrendsPage.tsx
│   └── SettingsPage.tsx
│
├── hooks/               # カスタムフック
│   ├── useAuth.ts
│   ├── useCompanies.ts
│   ├── useEvents.ts
│   ├── useTrends.ts
│   └── useCalendarSync.ts
│
├── contexts/            # Reactコンテキスト
│   ├── AuthContext.tsx
│   ├── CompanyContext.tsx
│   └── NotificationContext.tsx
│
├── services/            # 外部サービス連携
│   ├── firebase.ts
│   ├── firestore.ts
│   ├── functions.ts
│   └── analytics.ts
│
├── utils/               # ユーティリティ関数
│   ├── dateFormatter.ts
│   ├── normalizeCompanyName.ts
│   ├── validation.ts
│   └── constants.ts
│
├── types/               # TypeScript型定義
│   ├── company.ts
│   ├── event.ts
│   ├── trend.ts
│   └── user.ts
│
└── App.tsx              # アプリケーションルート
```

#### 主要技術スタック

| 技術 | 用途 | バージョン |
|-----|------|-----------|
| React | UIフレームワーク | 18.x |
| TypeScript | 型安全性 | 5.x |
| React Router | ルーティング | 6.x |
| Tailwind CSS | スタイリング | 3.x |
| Recharts | グラフ表示 | 2.x |
| Firebase SDK | バックエンド連携 | 10.x |
| date-fns | 日付操作 | 3.x |

#### 状態管理戦略

**採用パターン:** Context API + Custom Hooks

```typescript
// 認証状態
AuthContext → useAuth()
  ├─ user: User | null
  ├─ loading: boolean
  ├─ login()
  └─ logout()

// 企業データ
useCompanies()
  ├─ companies: Company[]
  ├─ loading: boolean
  ├─ createCompany()
  ├─ updateCompany()
  └─ deleteCompany()

// 予定データ
useEvents()
  ├─ events: Event[]
  ├─ loading: boolean
  ├─ createEvent()
  ├─ updateEvent()
  └─ deleteEvent()
```

---

### 2.2 ビジネスロジック層（Firebase Functions）

#### ディレクトリ構造

```
functions/
├── src/
│   ├── index.ts                    # エントリーポイント
│   ├── config/
│   │   ├── firebase.ts            # Firebase Admin初期化
│   │   ├── gemini.ts              # Gemini API設定
│   │   └── calendar.ts            # Calendar API設定
│   │
│   ├── handlers/                   # 各種ハンドラー
│   │   ├── companies/
│   │   │   ├── createCompany.ts
│   │   │   ├── reanalyzeCompany.ts
│   │   │   └── deleteCompany.ts
│   │   ├── events/
│   │   │   ├── createEvent.ts
│   │   │   ├── updateEvent.ts
│   │   │   └── deleteEvent.ts
│   │   ├── trends/
│   │   │   └── analyzeTrends.ts
│   │   └── calendar/
│   │       ├── syncToCalendar.ts
│   │       ├── updateCalendarEvent.ts
│   │       └── deleteCalendarEvent.ts
│   │
│   ├── services/                   # 外部サービス統合
│   │   ├── geminiService.ts       # Gemini API呼び出し
│   │   ├── calendarService.ts     # Calendar API呼び出し
│   │   └── firestoreService.ts    # Firestore操作
│   │
│   ├── utils/                      # ユーティリティ
│   │   ├── normalizer.ts          # 企業名正規化
│   │   ├── validators.ts          # バリデーション
│   │   ├── retry.ts               # リトライロジック
│   │   └── errorHandler.ts        # エラーハンドリング
│   │
│   ├── prompts/                    # Geminiプロンプト
│   │   ├── companyAnalysis.ts
│   │   └── trendAnalysis.ts
│   │
│   └── types/                      # 型定義
│       ├── company.ts
│       ├── event.ts
│       └── api.ts
│
├── package.json
└── tsconfig.json
```

#### Function一覧と責務

| Function名 | トリガー | 責務 |
|-----------|---------|------|
| `createCompany` | HTTPS Callable | 企業登録、重複チェック、Gemini分析 |
| `reanalyzeCompany` | HTTPS Callable | 企業再分析（30日経過後） |
| `deleteCompany` | HTTPS Callable | 企業削除、関連予定削除 |
| `createEvent` | HTTPS Callable | 予定登録、Calendar同期、企業統計更新 |
| `updateEvent` | HTTPS Callable | 予定更新、Calendar同期 |
| `deleteEvent` | HTTPS Callable | 予定削除、Calendar同期、企業統計更新 |
| `analyzeTrends` | HTTPS Callable | 傾向分析実行、Geminiサマリー生成 |
| `retryCalendarSync` | Firestore Trigger | カレンダー同期失敗時の自動リトライ |

---

### 2.3 データ層（Firestore）

#### コレクション構造

```
/users/{userId}
  ├── /companies/{companyId}        # 企業マスターデータ
  ├── /events/{eventId}             # 予定データ
  ├── /trends/{trendId}             # 傾向分析結果
  └── /usage/{usageId}              # API使用量管理
```

#### インデックス設計

| コレクション | フィールド | 方向 | 用途 |
|------------|-----------|------|------|
| companies | normalizedName | ASC | 重複チェック |
| companies | createdAt | DESC | 登録日順ソート |
| companies | stats.eventCount | DESC | 予定数順ソート |
| events | companyId | ASC | 企業別予定取得 |
| events | date | ASC | 日付順ソート |
| events | status | ASC | ステータスフィルタ |

---

## 3. データフロー設計

### 3.1 企業登録フロー

```
[ユーザー入力]
  "株式会社コドモン"
      ↓
┌─────────────────────────┐
│ 1. クライアント側処理    │
│  - 入力バリデーション    │
│  - 正規化プレビュー      │
└─────────────────────────┘
      ↓
┌─────────────────────────┐
│ 2. createCompany()      │
│  - 認証チェック         │
│  - 正規化実行           │
│  - 重複チェック         │
└─────────────────────────┘
      ↓
  <重複判定>
      ↓
┌──────────┬──────────┐
│ 重複あり │ 重複なし │
│          │          │
│ 既存企業 │ Gemini   │
│ 情報返却 │ 分析実行 │
└──────────┴──────────┘
      ↓           ↓
  [クライアント] [Firestore保存]
      ↓           ↓
  [確認ダイアログ] [完了通知]
```

### 3.2 予定登録 + Calendar同期フロー

```
[予定登録フォーム送信]
      ↓
┌─────────────────────────┐
│ 1. createEvent()        │
│  - 企業ID取得/作成      │
│  - Firestore保存        │
└─────────────────────────┘
      ↓
┌─────────────────────────┐
│ 2. syncToCalendar()     │
│  - OAuth トークン取得   │
│  - Calendar API呼び出し │
│  - EventID取得          │
└─────────────────────────┘
      ↓
  <API成功?>
      ↓
┌──────────┬──────────┐
│ 成功     │ 失敗     │
│          │          │
│ EventID  │ Status:  │
│ 保存     │ failed   │
└──────────┴──────────┘
      ↓           ↓
┌─────────────────────────┐
│ 3. 企業統計更新         │
│  - eventCount++         │
│  - lastEventDate更新    │
└─────────────────────────┘
      ↓
  [完了通知]
      ↓
  失敗時は自動リトライ
  (5分, 30分, 1時間後)
```

### 3.3 傾向分析フロー

```
[傾向分析ボタン押下]
      ↓
┌─────────────────────────┐
│ 1. 前提条件チェック     │
│  - 企業数 ≥ 3?          │
│  - 使用回数 < 10?       │
└─────────────────────────┘
      ↓
┌─────────────────────────┐
│ 2. analyzeTrends()      │
│  - 全企業データ取得     │
│  - 業界別集計           │
│  - キーワード抽出       │
└─────────────────────────┘
      ↓
┌─────────────────────────┐
│ 3. Gemini API呼び出し   │
│  - プロンプト生成       │
│  - サマリー生成         │
└─────────────────────────┘
      ↓
┌─────────────────────────┐
│ 4. Firestore保存        │
│  - trends/latest更新    │
│  - usage/today更新      │
└─────────────────────────┘
      ↓
  [結果表示]
  - 円グラフ
  - タグクラウド
  - AIサマリー
```

---

## 4. 外部API統合設計

### 4.1 Gemini API統合

#### 接続設定

```typescript
// services/geminiService.ts
import { GoogleGenerativeAI } from '@google/generative-ai';

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY!);

export const analyzeCompany = async (companyName: string) => {
  const model = genAI.getGenerativeModel({ 
    model: 'gemini-2.0-flash-exp',
    generationConfig: {
      responseMimeType: 'application/json',
      responseSchema: COMPANY_ANALYSIS_SCHEMA
    }
  });

  const result = await model.generateContent({
    contents: [{ 
      role: 'user', 
      parts: [{ text: generatePrompt(companyName) }] 
    }],
    tools: [{ googleSearch: {} }] // Grounding有効化
  });

  return JSON.parse(result.response.text());
};
```

#### レート制限対策

```typescript
// utils/retry.ts
export const retryWithBackoff = async (
  fn: () => Promise<any>,
  maxRetries = 3
) => {
  for (let i = 0; i < maxRetries; i++) {
    try {
      return await fn();
    } catch (error: any) {
      if (error.status === 429) { // Too Many Requests
        const delay = Math.pow(2, i) * 1000; // 1s, 2s, 4s
        await sleep(delay);
      } else {
        throw error;
      }
    }
  }
  throw new Error('Max retries exceeded');
};
```

### 4.2 Google Calendar API統合

#### OAuth 2.0フロー

```typescript
// services/calendarService.ts
import { google } from 'googleapis';

export const getCalendarClient = async (userId: string) => {
  const oauth2Client = new google.auth.OAuth2(
    process.env.GOOGLE_CLIENT_ID,
    process.env.GOOGLE_CLIENT_SECRET,
    process.env.REDIRECT_URI
  );

  // Firestoreからリフレッシュトークン取得
  const tokenDoc = await admin
    .firestore()
    .doc(`users/${userId}/tokens/calendar`)
    .get();

  oauth2Client.setCredentials({
    refresh_token: tokenDoc.data()?.refreshToken
  });

  return google.calendar({ version: 'v3', auth: oauth2Client });
};

export const createCalendarEvent = async (
  userId: string,
  eventData: EventData
) => {
  const calendar = await getCalendarClient(userId);
  
  const event = {
    summary: `【${eventData.eventType}】${eventData.companyName}`,
    description: eventData.memo,
    start: {
      dateTime: eventData.date,
      timeZone: 'Asia/Tokyo'
    },
    end: {
      dateTime: eventData.endDate,
      timeZone: 'Asia/Tokyo'
    },
    location: eventData.location
  };

  const response = await calendar.events.insert({
    calendarId: 'primary',
    requestBody: event
  });

  return response.data.id; // EventIDを返却
};
```

---

## 5. セキュリティアーキテクチャ

### 5.1 認証・認可フロー

```
[ユーザー]
    ↓
[Firebase Authentication]
    ↓ (ID Token)
[React App]
    ↓ (ID Token自動付与)
[Firebase Functions]
    ↓ (context.auth検証)
[Firestore]
    ↓ (Security Rules検証)
[データアクセス許可]
```

### 5.2 Firestoreセキュリティルール

```javascript
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // 認証済みユーザーのみアクセス可能
    match /users/{userId}/{document=**} {
      allow read, write: if request.auth != null 
                         && request.auth.uid == userId;
    }
    
    // 他のユーザーのデータは一切アクセス不可
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
```

### 5.3 環境変数管理

**開発環境（Emulator）:**
```bash
# .env.local
REACT_APP_FIREBASE_API_KEY=xxx
REACT_APP_FIREBASE_AUTH_DOMAIN=xxx
GEMINI_API_KEY=xxx (Functions用)
GOOGLE_CLIENT_ID=xxx
GOOGLE_CLIENT_SECRET=xxx
```

**本番環境（将来）:**
- Secret Managerに移行
- 環境変数はCloud Functionsの設定から注入

---

## 6. パフォーマンス設計

### 6.1 フロントエンド最適化

| 手法 | 実装箇所 | 効果 |
|-----|---------|------|
| Code Splitting | React.lazy() | 初期ロード時間短縮 |
| Memoization | React.memo, useMemo | 再レンダリング削減 |
| Debounce | 検索入力 | API呼び出し削減 |
| Virtual Scrolling | 予定一覧（50件以上時） | レンダリング高速化 |
| Image Lazy Loading | 企業ロゴ | 帯域幅節約 |

### 6.2 バックエンド最適化

| 手法 | 実装箇所 | 効果 |
|-----|---------|------|
| Batch処理 | 複数予定の一括作成 | API呼び出し削減 |
| 並列処理 | Promise.all | 処理時間短縮 |
| キャッシング | 企業分析結果 | API使用量削減 |
| Index最適化 | Firestoreクエリ | クエリ速度向上 |

### 6.3 目標パフォーマンス指標

| 指標 | 目標値 | 測定方法 |
|-----|--------|---------|
| 初回ロード時間 | < 2秒 | Lighthouse |
| ページ遷移速度 | < 300ms | Navigation Timing API |
| Gemini分析時間 | < 10秒 | 実測値 |
| Firestoreクエリ | < 500ms | Firebase Console |

---

## 7. エラーハンドリング設計

### 7.1 エラー分類と対応

| エラー種別 | 検出場所 | 対応方法 |
|-----------|---------|---------|
| 認証エラー | Functions | 401エラー、再ログイン促進 |
| 権限エラー | Firestore | 403エラー、権限確認画面 |
| ネットワークエラー | API呼び出し | リトライ（最大3回） |
| レート制限エラー | Gemini/Calendar | Exponential Backoff |
| バリデーションエラー | フォーム入力 | 入力欄下部に赤文字表示 |
| 予期しないエラー | 全般 | ErrorBoundary、エラーログ送信 |

### 7.2 グローバルエラーハンドラー

```typescript
// components/common/ErrorBoundary.tsx
class ErrorBoundary extends React.Component {
  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {
    // エラーログ送信（将来的にSentryなど導入）
    console.error('Global Error:', error, errorInfo);
    
    // ユーザーにわかりやすいエラー表示
    this.setState({ hasError: true, error });
  }

  render() {
    if (this.state.hasError) {
      return <ErrorFallback error={this.state.error} />;
    }
    return this.props.children;
  }
}
```

---

## 8. 監視・ロギング設計

### 8.1 ログ出力方針

**Functions側:**
```typescript
import * as functions from 'firebase-functions';

export const createCompany = functions.https.onCall(async (data, context) => {
  const startTime = Date.now();
  
  functions.logger.info('createCompany called', {
    userId: context.auth?.uid,
    companyName: data.companyName
  });

  try {
    // 処理...
    functions.logger.info('createCompany success', {
      duration: Date.now() - startTime
    });
  } catch (error) {
    functions.logger.error('createCompany failed', {
      error: error.message,
      stack: error.stack
    });
    throw error;
  }
});
```

### 8.2 監視項目

| 項目 | 監視方法 | アラート条件 |
|-----|---------|------------|
| API成功率 | Functions logs | < 95% |
| 平均応答時間 | Functions logs | > 10秒 |
| Gemini API使用量 | 日次集計 | > 1400 RPD |
| エラー発生数 | Functions logs | > 10回/時 |

---

## 9. スケーラビリティ設計

### 9.1 現在の規模（v1.5）
- **想定ユーザー数:** 10名
- **企業データ:** 100社/ユーザー
- **予定データ:** 500件/ユーザー
- **Gemini API:** 150 RPD（10ユーザー × 15分析/日）

### 9.2 将来の拡張性（v2.0以降）

**100ユーザー規模:**
- Firestoreインデックス最適化
- Functionsのメモリ増量（512MB → 1GB）
- キャッシュ層追加（Redis検討）

**1000ユーザー規模:**
- マイクロサービス化検討
- Gemini APIのバッチ処理導入
- CDN導入（静的ファイル配信）

---

## 10. デプロイメント設計（将来）

### 10.1 デプロイフロー

```
[Git Push to main]
    ↓
[GitHub Actions]
    ↓
┌──────────────────────┐
│ 1. ビルド             │
│  - npm run build     │
│  - TypeScriptコンパイル│
└──────────────────────┘
    ↓
┌──────────────────────┐
│ 2. テスト             │
│  - Unit Tests        │
│  - Integration Tests │
└──────────────────────┘
    ↓
┌──────────────────────┐
│ 3. デプロイ           │
│  - Firebase Deploy   │
│  - Hosting / Functions│
└──────────────────────┘
    ↓
[本番環境反映]
```

### 10.2 環境分離

| 環境 | 用途 | Firebase Project |
|-----|------|-----------------|
| Development | ローカル開発 | Emulators |
| Staging | 統合テスト | job-mete-staging |
| Production | 本番環境 | job-mete-prod |

---

## 11. 技術的負債管理

### 11.1 既知の技術的負債（v1.5）

| 項目 | 現状 | 理想 | 対応時期 |
|-----|------|------|---------|
| トークン管理 | 環境変数 | Secret Manager | v2.0 |
| エラーログ | console.log | Sentry統合 | v2.0 |
| テストカバレッジ | 0% | 80%以上 | v2.5 |
| キャッシュ | なし | Redis/Memcache | v3.0 |
| CI/CD | 手動デプロイ | 自動デプロイ | v2.0 |

---

## 12. まとめ

本アーキテクチャ設計書は、Job Mete v1.5のシステム全体構成、各レイヤーの責務、データフロー、外部API統合、セキュリティ、パフォーマンス、エラーハンドリングを網羅しています。

**重要なアーキテクチャ判断:**
1. **サーバーレスアーキテクチャ:** 小規模開発に最適、運用コスト最小化
2. **BFFパターン:** Functionsで外部API統合を一元管理
3. **NoSQLデータベース:** Firestoreでスキーマレス、スケーラブル
4. **OAuth 2.0:** 安全なカレンダー連携
5. **構造化JSON出力:** Gemini APIの結果を型安全に扱う

このアーキテクチャは、プロトタイプから本番環境への移行を見据えた設計になっています。